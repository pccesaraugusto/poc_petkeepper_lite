extend type Answer {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Answer", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Answer` table.
  """
  _count: Int! @fdc_generated(from: "Answer.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Answer` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Answer.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Answer` table where the `questionId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  questionId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Answer.questionId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Answer` table where the `responseId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  responseId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Answer.responseId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Answer` table where the `value` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  value_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Answer.value", purpose: QUERY_COUNT)
}
extend type Question {
  """
  ✨ List `Answer` objects in a one-to-many relationship (where `Answer`.`question` is this object).
  """
  answers_on_question(
    """
    Filter condition to narrow down the query results.
    """
    where: Answer_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Answer_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Answer_Having
  ): [Answer!]! @fdc_generated(from: "Answer.question", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Question", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Question` table.
  """
  _count: Int! @fdc_generated(from: "Question.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Question` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Question.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Question` table where the `order` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  order_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Question.order", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Question` table where the `surveyId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  surveyId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Question.surveyId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Question` table where the `text` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  text_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Question.text", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Question` table where the `type` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  type_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Question.type", purpose: QUERY_COUNT)
  """
  ✨ Sum the `order` field in the `Question` table.
  """
  order_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Question.order", purpose: QUERY_SUM)
  """
  ✨ Average the `order` field in the `Question` table.
  """
  order_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Question.order", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `order` field in the `Question` table.
  """
  order_min: Int @fdc_generated(from: "Question.order", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `order` field in the `Question` table.
  """
  order_max: Int @fdc_generated(from: "Question.order", purpose: QUERY_MAX)
}
extend type Response {
  """
  ✨ List `Answer` objects in a one-to-many relationship (where `Answer`.`response` is this object).
  """
  answers_on_response(
    """
    Filter condition to narrow down the query results.
    """
    where: Answer_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Answer_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Answer_Having
  ): [Answer!]! @fdc_generated(from: "Answer.response", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Response", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Response` table.
  """
  _count: Int! @fdc_generated(from: "Response.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Response` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Response.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Response` table where the `respondentIdentifier` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  respondentIdentifier_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Response.respondentIdentifier", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Response` table where the `submittedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  submittedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Response.submittedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Response` table where the `surveyId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  surveyId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Response.surveyId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `submittedAt` field in the `Response` table.
  """
  submittedAt_min: Timestamp @fdc_generated(from: "Response.submittedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `submittedAt` field in the `Response` table.
  """
  submittedAt_max: Timestamp @fdc_generated(from: "Response.submittedAt", purpose: QUERY_MAX)
}
extend type Survey {
  """
  ✨ List `Question` objects in a one-to-many relationship (where `Question`.`survey` is this object).
  """
  questions_on_survey(
    """
    Filter condition to narrow down the query results.
    """
    where: Question_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Question_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Question_Having
  ): [Question!]! @fdc_generated(from: "Question.survey", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Response` objects in a one-to-many relationship (where `Response`.`survey` is this object).
  """
  responses_on_survey(
    """
    Filter condition to narrow down the query results.
    """
    where: Response_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Response_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Response_Having
  ): [Response!]! @fdc_generated(from: "Response.survey", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Survey", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Survey` table.
  """
  _count: Int! @fdc_generated(from: "Survey.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Survey` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Survey.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Survey` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Survey.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Survey` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Survey.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Survey` table where the `publishedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  publishedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Survey.publishedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Survey` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Survey.title", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Survey` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Survey.userId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Survey` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Survey.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `publishedAt` field in the `Survey` table.
  """
  publishedAt_min: Timestamp @fdc_generated(from: "Survey.publishedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Survey` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Survey.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `publishedAt` field in the `Survey` table.
  """
  publishedAt_max: Timestamp @fdc_generated(from: "Survey.publishedAt", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `Survey` objects in a one-to-many relationship (where `Survey`.`user` is this object).
  """
  surveys_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Survey_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Survey_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Survey_Having
  ): [Survey!]! @fdc_generated(from: "Survey.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
}
